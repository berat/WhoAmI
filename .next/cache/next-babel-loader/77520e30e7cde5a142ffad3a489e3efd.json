{"ast":null,"code":"export default (async (req, res) => {\n  // 1. Destructure the email address from the request body.\n  const {\n    email\n  } = req.body; // const email = \"deneme@deneme.com\"\n\n  if (!email) {\n    // 2. Throw an error if an email wasn't provided.\n    return res.status(400).json({\n      error: 'Email is required'\n    });\n  }\n\n  try {\n    // 3. Fetch the environment variables.\n    const LIST_ID = process.env.LIST_ID;\n    const API_KEY = process.env.MAILCHIMP; // 4. API keys are in the form <key>-us3.\n\n    const DATACENTER = API_KEY.split('-')[1]; // 5. The status of 'subscribed' is equivalent to a double opt-in.\n\n    const data = {\n      email_address: email,\n      status: 'subscribed'\n    }; // 6. Send a POST request to Mailchimp.\n\n    const response = await fetch(`https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`, {\n      body: JSON.stringify(data),\n      headers: {\n        Authorization: `apikey ${API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    }); // 7. Swallow any errors from Mailchimp and return a better error message.\n\n    if (response.status >= 400) {\n      return res.status(400).json({\n        error: `There was an error subscribing to the newsletter. Try again!`\n      });\n    } // 8. If we made it this far, it was a success! ðŸŽ‰\n\n\n    return res.status(201).json({\n      error: ''\n    });\n  } catch (error) {\n    return res.status(500).json({\n      error: error.message || error.toString()\n    });\n  }\n});","map":{"version":3,"sources":["/Users/bozkurt/Desktop/deneme/WhoAmI/pages/api/subscribe.js"],"names":["req","res","email","body","status","json","error","LIST_ID","process","env","API_KEY","MAILCHIMP","DATACENTER","split","data","email_address","response","fetch","JSON","stringify","headers","Authorization","method","message","toString"],"mappings":"AAAA,gBAAe,OAAOA,GAAP,EAAYC,GAAZ,KAAoB;AACjC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAYF,GAAG,CAACG,IAAtB,CAFiC,CAIjC;;AAEA,MAAI,CAACD,KAAL,EAAY;AACV;AACA,WAAOD,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD;;AAED,MAAI;AACF;AACA,UAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYF,OAA5B;AACA,UAAMG,OAAO,GAAGF,OAAO,CAACC,GAAR,CAAYE,SAA5B,CAHE,CAIF;;AACA,UAAMC,UAAU,GAAGF,OAAO,CAACG,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAnB,CALE,CAOF;;AACA,UAAMC,IAAI,GAAG;AACXC,MAAAA,aAAa,EAAEb,KADJ;AAEXE,MAAAA,MAAM,EAAE;AAFG,KAAb,CARE,CAaF;;AACA,UAAMY,QAAQ,GAAG,MAAMC,KAAK,CACzB,WAAUL,UAAW,gCAA+BL,OAAQ,UADnC,EAE1B;AACEJ,MAAAA,IAAI,EAAEe,IAAI,CAACC,SAAL,CAAeL,IAAf,CADR;AAEEM,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,EAAG,UAASX,OAAQ,EAD1B;AAEP,wBAAgB;AAFT,OAFX;AAMEY,MAAAA,MAAM,EAAE;AANV,KAF0B,CAA5B,CAdE,CA0BF;;AACA,QAAIN,QAAQ,CAACZ,MAAT,IAAmB,GAAvB,EAA4B;AAC1B,aAAOH,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,KAAK,EAAG;AADkB,OAArB,CAAP;AAGD,KA/BC,CAiCF;;;AACA,WAAOL,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAArB,CAAP;AACD,GAnCD,CAmCE,OAAOA,KAAP,EAAc;AACd,WAAOL,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,MAAAA,KAAK,EAAEA,KAAK,CAACiB,OAAN,IAAiBjB,KAAK,CAACkB,QAAN;AAA1B,KAArB,CAAP;AACD;AACF,CAjDD","sourcesContent":["export default async (req, res) => {\n  // 1. Destructure the email address from the request body.\n  const { email } = req.body;\n\n  // const email = \"deneme@deneme.com\"\n\n  if (!email) {\n    // 2. Throw an error if an email wasn't provided.\n    return res.status(400).json({ error: 'Email is required' });\n  }\n\n  try {\n    // 3. Fetch the environment variables.\n    const LIST_ID = process.env.LIST_ID;\n    const API_KEY = process.env.MAILCHIMP;\n    // 4. API keys are in the form <key>-us3.\n    const DATACENTER = API_KEY.split('-')[1];\n\n    // 5. The status of 'subscribed' is equivalent to a double opt-in.\n    const data = {\n      email_address: email,\n      status: 'subscribed'\n    };\n\n    // 6. Send a POST request to Mailchimp.\n    const response = await fetch(\n      `https://${DATACENTER}.api.mailchimp.com/3.0/lists/${LIST_ID}/members`,\n      {\n        body: JSON.stringify(data),\n        headers: {\n          Authorization: `apikey ${API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        method: 'POST'\n      }\n    );\n\n    // 7. Swallow any errors from Mailchimp and return a better error message.\n    if (response.status >= 400) {\n      return res.status(400).json({\n        error: `There was an error subscribing to the newsletter. Try again!`\n      });\n    }\n\n    // 8. If we made it this far, it was a success! ðŸŽ‰\n    return res.status(201).json({ error: '' });\n  } catch (error) {\n    return res.status(500).json({ error: error.message || error.toString() });\n  }\n};"]},"metadata":{},"sourceType":"module"}